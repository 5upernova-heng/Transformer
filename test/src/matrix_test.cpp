#include <matrix.h>
#include "gtest/gtest.h"

namespace {
    TEST(MatrixTest, AddTest) {
        Mat2D mat1({{1, 1},
                    {1, 1}});
        Mat2D mat2({{2, 2},
                    {2, 2}});
        Mat2D result(2, 2);
        Mat2D::add(mat1, mat2, result);
        EXPECT_EQ(result, Mat2D({{3, 3},
                                 {3, 3}}));
    }

    TEST(MatrixTest, MulTest) {
        Mat2D mat1({{1, 1},
                    {1, 1}});
        Mat2D mat2({{2, 2},
                    {2, 2}});
        Mat2D result(2, 2);
        Mat2D::multiply(mat1, mat2, result);
        EXPECT_EQ(result, Mat2D({{4, 4},
                                 {4, 4}}));
    }

    TEST(MatrixTest, HighPresicionMatMulTest) {
        Mat2D mat1(
                {{-1.483831,   0.5856153,   2.3866305,   1.7784377,   0.1951699,   -0.63576025, 2.0868688,  0.17793843,  0.70915776,  -2.251619},
                 {0.44592166,  0.19169419,  -0.2005907,  1.295733,    -0.41096538, -1.0691956,  0.6559065,  1.2003846,   0.8276886,   -1.7766254},
                 {-0.02309559, -0.8923167,  1.4010729,   -0.31061116, 0.05910558,  -0.11891896, -1.7652305, -0.21090269, 1.6338979,   1.5228648},
                 {-1.7438083,  -0.3932817,  -1.0914547,  -0.86783016, 0.8137098,   0.17185879,  0.26175556, 0.2490905,   0.17409869,  0.6829463},
                 {-1.2229106,  0.81561476,  0.20825139,  2.090569,    -0.7515216,  -0.57230526, -0.4932266, -1.4199892,  -1.608099,   1.0552601},
                 {-0.19451885, 1.097452,    -1.1666242,  0.6836545,   0.540191,    1.1770082,   0.96336925, 1.3042257,   -0.5453631,  -0.42923543},
                 {0.47528392,  -0.21573573, -0.47587502, 0.60907084,  -1.6082468,  1.1148394,   0.55191684, -0.35526836, -1.1314511,  -1.833631},
                 {-0.8026144,  -0.45911333, 0.00928256,  1.4324684,   -0.35554916, -0.55261624, 1.7857584,  -0.88877666, -0.9749965,  0.02972946},
                 {-0.26096725, 1.1304008,   -0.5038004,  0.476757,    0.62570506,  -0.26945361, -2.3117127, 1.514961,    -0.2457355,  -1.2392998},
                 {0.18360473,  -0.19224297, 0.65137815,  -1.3132722,  1.0131582,   -0.42652467, 1.3099548,  -1.3887362,  -0.34316057, -0.73237175}});
        Mat2D mat2(
                {{0.21169372,  0.94211084, -0.25162762, -0.19433467, -1.616425,   0.398499,    -0.6465537,  -0.22702706, 1.9212543,   -2.4785752},
                 {0.55126345,  0.13310367, 1.8451968,   -0.03234907, 1.1941035,   0.4324498,   -0.44657287, -0.36306265, -0.24865735, -0.63645387},
                 {-0.01104849, 0.04268938, -1.4853616,  0.89600635,  0.11693998,  -0.57703465, 0.30328125,  1.7495306,   -0.34166706, -0.5055052},
                 {0.4234653,   0.36063397, 0.13680385,  -0.69433326, -0.10173127, -0.375288,   -1.8658245,  0.6998584,   0.25538749,  -0.11011887},
                 {-0.9075202,  -1.734113,  -0.1411682,  -0.58231306, -0.6441035,  0.26334652,  1.9450701,   -1.4459013,  -1.5928627,  1.7567472},
                 {0.63330054,  1.0814289,  -1.7681928,  0.89059365,  0.7043739,   1.0347128,   -0.20992932, -0.30682224, 0.41231346,  0.82408094},
                 {-0.7568705,  0.24399357, -0.5280196,  0.04469146,  0.27369225,  1.6999993,   -0.714067,   -0.20987663, 1.0300256,   0.24733493},
                 {0.12369819,  0.02731034, 0.51205844,  -2.0742226,  1.7459326,   -0.1879622,  0.5170057,   -0.5435462,  -0.32954666, -0.35891104},
                 {-0.8108317,  0.4789086,  -1.3371753,  0.66393954,  -0.21982057, -0.13632515, -1.2399027,  0.54798573,  -1.110274,   1.0288877},
                 {1.337513,    2.3246458,  0.91391355,  -0.59991723, 1.769086,    -1.5647386,  -1.1693944,  0.6728395,   -1.1460456,  0.6067501}}
        );
        Mat2D result(
                {{-4.9883556,  -5.983266,   -4.7680154, 2.0389736,  -0.63493276, 3.9516666,   -1.0279167,  3.7961888,   -0.04669976, 1.5374876},
                 {-2.9485023,  -3.0800714,  0.20316613, -2.7303562, -2.185218,   2.232069,    -2.2236972,  -0.22462106, 2.81943,     -3.3665776},
                 {1.2492433,   3.4623108,   -3.5313127, 1.8938503,  0.52898335,  -6.7613425,  -1.097438,   4.9191847,   -5.831774,   2.20114},
                 {-0.96603006, -1.5383271,  1.1775315,  -1.143651,  3.5831623,   -0.21157676, 3.0653117,   -2.8428998,  -5.114951,   7.3597193},
                 {4.3062787,   1.9274292,   5.555437,   0.09682369, 2.4494305,   -3.8329945,  -4.3747225,  3.775333,    -0.59250605, -0.24198413},
                 {0.42164028,  -0.49266303, 2.2390358,  -3.5507932, 3.8013217,   4.3123856,   -0.02557439, -4.557814,   1.2113479,   1.1656501},
                 {0.41364598,  -0.06654978, -2.1078901, 2.105085,   -2.7866948,  4.900571,    -1.8845427,  -0.229051,   8.349516,    -4.7864733},
                 {-0.47501305, -0.26770407, 0.4971994,  0.15757363, -0.35181972, 1.5624814,   -3.0820343,  1.6453325,   2.4540007,   0.8146488},
                 {0.5156106,   -4.8426967,  4.5455,     -4.0379753, 0.94533086,  -1.8593799,  4.0830708,   -3.027731,   -2.7835844,  -1.1135763},
                 {-3.6845717,  -4.1017566,  -2.5502214, 3.646807,   -4.55589,    3.6132035,   4.3037677,   -1.2863476,  1.0801964,   0.9359788}}
        );
        Mat2D dest(10, 10);
        Mat2D::matmul(mat1, mat2, dest);
        EXPECT_EQ(result, dest);
    }

    TEST(MatrixTest, ConcatTest) {
        Mat2D mat1({{1, 1},
                    {1, 1}});
        Mat2D mat2({{2, 2},
                    {2, 2}});
        Mat2D result(2, 4);
        Mat2D::concat(mat1, mat2, result);
        EXPECT_EQ(result, Mat2D({{1, 1, 2, 2},
                                 {1, 1, 2, 2},}));
    }

    TEST(MatrixTest, ArrayConcatTest) {
        std::vector<std::shared_ptr<Mat2D>> mats;
        Mat2D mat1({{1, 1},
                    {1, 1}});
        Mat2D mat2({{2, 2},
                    {2, 2}});
        Mat2D mat3({{3, 3},
                    {3, 3}});
        mats.push_back(std::make_shared<Mat2D>(mat1));
        mats.push_back(std::make_shared<Mat2D>(mat2));
        mats.push_back(std::make_shared<Mat2D>(mat3));
        Mat2D result(2, 6);
        Mat2D::concat(mats, result);
        EXPECT_EQ(result, Mat2D({{1, 1, 2, 2, 3, 3},
                                 {1, 1, 2, 2, 3, 3}}));
    }

    TEST(MatrixTest, EqTest) {
        Mat2D mat1({{1, 1},
                    {1, 1}});
        Mat2D mat2({{1, 1},
                    {1, 1}});
        EXPECT_EQ(mat1, mat2);
    }

    TEST(MatrixTest, BiasTest) {
        Mat2D mat1({{1, 0},
                    {0, 1}});
        mat1 += 3;
        EXPECT_EQ(mat1, Mat2D({{4, 3},
                               {3, 4}}));
    }

    TEST(MatrixTest, ScaleTest) {
        Mat2D mat1({{1, 1},
                    {1, 1}});
        Mat2D mat2({{2, 2},
                    {2, 2}});
        mat1 *= 2;
        EXPECT_EQ(mat1, mat2);
    }

    TEST(MatrixTest, SoftmaxTest) {
        Mat2D mat1({{2, 0, 1},
                    {0, 2, 1},
                    {1, 1, 2}});
        mat1.softmax();
        EXPECT_EQ(mat1, Mat2D({{0.665241, 0.090031, 0.244728},
                               {0.090031, 0.665241, 0.244728},
                               {0.211942, 0.211942, 0.576117}}));
    }

    TEST(MatrixTest, MaskTest) {
        Mat2D mat1({{0, 0, 0},
                    {0, 0, 0},
                    {0, 0, 0}});
        mat1.mask();
        auto inf = (float) MASK_INF;
        EXPECT_EQ(mat1, Mat2D({{0, -inf, -inf},
                               {0, 0,    -inf},
                               {0, 0,    0}}));
    }

    TEST(MatrixTest, LayerNormTest) {
        Mat2D mat1({{1, 2, 3, 4}});
        mat1.layerNorm();
        EXPECT_EQ(mat1, Mat2D({{-1.3416407, -0.4472136, 0.4472136, 1.3416407}}));
    }
}
